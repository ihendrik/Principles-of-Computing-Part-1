"""
Planner for Yahtzee
Simplifications:  only allow discard and roll, only score against upper level
"""

# Used to increase the timeout, if necessary
import codeskulptor
codeskulptor.set_timeout(20)

def gen_all_sequences(outcomes, length):
    """
    Iterative function that enumerates the set of all sequences of
    outcomes of given length.
    """
    answer_set = set([()])
    for dummy_idx in range(length):
        temp_set = set()
        for partial_sequence in answer_set:
            for item in outcomes:
                new_sequence = list(partial_sequence)
                new_sequence.append(item)
                temp_set.add(tuple(new_sequence))
        answer_set = temp_set
    return answer_set

def score(hand):
    """
    Compute the maximal score for a Yahtzee hand according to the
    upper section of the Yahtzee score card.

    hand: full yahtzee hand

    Returns an integer score 
    """
    hand_dict={1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0}
    high_value=float('-inf')
    for num in hand:
        hand_dict[num]+=1
    for num in hand_dict:
        if(high_value<=(hand_dict[num]*num)):
            high_value=(hand_dict[num]*num)
    return high_value

def expected_value(held_dice, num_die_sides, num_free_dice):
    """
    Compute the expected value based on held_dice given that there
    are num_free_dice to be rolled, each with num_die_sides.

    held_dice: dice that you will hold
    num_die_sides: number of sides on each die
    num_free_dice: number of dice to be rolled

    Returns a floating point expected value
    """
    all_seq=gen_all_sequences(range(1, num_die_sides+1), num_free_dice)
    total=0.0
    for seq in all_seq:
        total+=score(held_dice+seq)
    return total/len(all_seq)

def gen_all_holds(hand):
    """
    Generate all possible choices of dice from hand to hold.

    hand: full yahtzee hand

    Returns a set of tuples, where each tuple is dice to hold
    """
    all_holds=set([()])

    for idx1 in range(len(hand)):
        all_holds.add(tuple([hand[idx1]]))
        idx2=idx1+1
        while idx2<len(hand):
            all_holds.add(tuple([hand[idx1],hand[idx2]]))
            idx3=idx2+1
            while idx3<len(hand):
                all_holds.add(tuple([hand[idx1],hand[idx2],hand[idx3]]))
                idx4=idx3+1
                while idx4<len(hand):
                    all_holds.add(tuple([hand[idx1],hand[idx2],hand[idx3],hand[idx4]]))
                    idx5=idx4+1
                    while idx5<len(hand):
                        all_holds.add(tuple([hand[idx1],hand[idx2],hand[idx3],hand[idx4],hand[idx5]]))
                        idx6=idx5+1
                        while idx6<len(hand):
                            all_holds.add(tuple([hand[idx1],hand[idx2],hand[idx3],hand[idx4],hand[idx5],hand[idx6]]))
                            idx6+=1
                        idx5+=1
                    idx4+=1
                idx3+=1
            idx2+=1
    return all_holds

def strategy(hand, num_die_sides):
    """
    Compute the hold that maximizes the expected value when the
    discarded dice are rolled.

    hand: full yahtzee hand
    num_die_sides: number of sides on each die

    Returns a tuple where the first element is the expected score and
    the second element is a tuple of the dice to hold
    """
    all_holds=gen_all_holds(hand)
    max_val=float('-inf')
    best_hold=()
    for holds in all_holds:
        exp_val=expected_value(holds, num_die_sides,len(hand)-len(holds))
        if(max_val<=exp_val):
            max_val=exp_val
            best_hold=holds
    
    return (max_val, best_hold)


def run_example():
    """
    Compute the dice to hold and expected score for an example hand
    """
    num_die_sides = 6
    hand = (1, 1, 1, 5, 6)
    hand_score, hold = strategy(hand, num_die_sides)
    print "Best strategy for hand", hand, "is to hold", hold, "with expected score", hand_score
    
    
run_example()


#import poc_holds_testsuite
#poc_holds_testsuite.run_suite(gen_all_holds)
